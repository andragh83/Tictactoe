{"version":3,"sources":["Components/Status/Status.js","Components/Square/Square.js","Components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Status","_ref","status","click","react_default","a","createElement","className","onClick","Square","value","index","Board","squares","renderSquare","i","Components_Square_Square","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","SquareClick","event","state","Number","target","scorex","scorey","player","setState","GetWinner","cstatus","length","includes","undefined","_this$state$squares","slicedToArray","b","c","d","e","f","g","h","onStatusChange","Components_Status_Status","Components_Board_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df15bd18.chunk.js","sourcesContent":["import React from 'react';\n\nconst Status = ({status, click} ) => {\n\treturn (\n\t\t<div className='status' onClick={click}>\n\t\t{status}\n\t\t</div>\n\t\t);\n}\n\nexport default Status;","import React from 'react';\nimport './Square.css'\n\nconst Square = ({ click, value, index }) => {\n\treturn (\n\t\t<button \n\t\tclassName='square'\n\t\tonClick={click}\n\t\tvalue={index} \n\t\t>\n\t\t{value}\n\t\t</button>\n\t\t);\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square/Square';\nimport './Board.css';\n\nconst Board = ({squares, click}) => { \n\n\t// const calculateWinner = (x) => {\n\t// \tconst lines = [\n\t// \t\t[0, 1, 2],\n\t// \t    [3, 4, 5],\n\t// \t    [6, 7, 8],\n\t// \t    [0, 3, 6],\n\t// \t    [1, 4, 7],\n\t// \t    [2, 5, 8],\n\t// \t    [0, 4, 8],\n\t// \t    [2, 4, 6],\n\t// \t];\n\n\t// \tlines.forEach((i) => {\n\t// \t\tconst [a,b,c] = i;\n\t// \t\tif (x[a] && x[a] === x[b] && x[a] === x[c]) {\n\t// \t\t\treturn x[a];\n\t// \t\t}\n\t// \t})\n\n\t// \treturn null;\n\t// }\n\n\tconst renderSquare = (i) => {\n\t\t\t\treturn <Square value={squares[i]} click={click} index={i}/>\n\t}\n\n\treturn(\n\t\t<div>\n\t\t\t<div className='boardRow'>\n\t\t\t\t{renderSquare(0)}\n\t\t\t\t{renderSquare(1)}\n\t\t\t\t{renderSquare(2)}\n\t\t\t</div>\n\t\t\t<div className='boardRow'>\n\t\t\t\t{renderSquare(3)}\n\t\t\t\t{renderSquare(4)}\n\t\t\t\t{renderSquare(5)}\n\t\t\t</div>\n\t\t\t<div className='boardRow'>\n\t\t\t\t{renderSquare(6)}\n\t\t\t\t{renderSquare(7)}\n\t\t\t\t{renderSquare(8)}\n\t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport Status from './Components/Status/Status';\nimport Board from './Components/Board/Board';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      player: 'X',\n      squares: [],\n      cstatus: 'Next player: X',\n      scorex: 0,\n      scorey: 0\n    }\n  }\n\n  SquareClick = (event) => {\n\n    let squares = this.state.squares;\n    const i = Number(event.target.value);\n    let scorex = this.state.scorex;\n    let scorey = this.state.scorey;\n\n        // if (this.GetWinner()) {\n        //   this.setState({squares: []});\n        // } else if (squares.length === 9 && !squares.includes(undefined)) {\n        //     this.setState({squares: []});\n        //   }\n\n        // if (this.GetWinner() || squares[i]) {\n        //   return;\n        // }\n\n        if (this.state.player === 'X' && !squares[i]) {\n                                squares[i]='X';\n                                this.setState({squares: squares, player: 'Y'});\n                            \n                              } else if (!squares[i]){\n                                squares[i]='Y';\n                                this.setState({squares: squares, player: 'X'});\n                                \n                              }\n        \n        \n        \n      \n\n        if (this.GetWinner()) {\n          this.setState({cstatus: 'Winner is ' + this.state.player + '. Click here to keep playing'});\n          // this.setState({squares: []});\n          if (this.state.player==='X') {\n            scorex++;\n            this.setState({scorex: scorex})\n          } else {\n            scorey++;\n            this.setState({scorey: scorey})\n          }\n        } else if (squares.length === 9 && !squares.includes(undefined)) {\n            this.setState({cstatus: 'Oups! Nobody won. Click here to try again!'})\n            // this.setState({squares: []});\n        } else { \n          this.setState({cstatus: 'Next player: ' + this.state.player});\n        }\n\n        \n  }\n\n  GetWinner = () => {\n    const [a, b, c, d, e, f, g, h, i] = this.state.squares;\n    if (\n        (a===b && a===c && a) ||\n        (a===e && a===i && a) ||\n        (d===e && e===f && e) ||\n        (g===h && h===i && g) ||\n        (a===d && d===g && a) ||\n        (b===e && e===h && b) ||\n        (c===f && f===i && c) ||\n        (c===e && e===g && c)\n          ) {\n      return true;\n    } else {return false};\n  }\n\n  onStatusChange = () => {\n  if (this.state.cstatus.includes('Winner') || (this.state.cstatus.includes('again'))) {\n    this.setState({squares: [], \n                  player: 'X',\n                  cstatus: 'Next player: X'}\n                  );\n  }\n}\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className='game'>\n          <div className='game-info'>\n              <Status status = {this.state.cstatus} click={this.onStatusChange}/>\n              <Board squares={this.state.squares} click={this.SquareClick}/>\n              <div className='status'>{'X: '} {this.state.scorex} {' | '} {'Y: '} {this.state.scorey} </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}